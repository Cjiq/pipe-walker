// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package app

import (
	"context"
	"database/sql"
)

const createLine = `-- name: CreateLine :one
INSERT INTO lines (name, type, n_id) VALUES (?, ?, ?)
RETURNING id, name, type, n_id
`

type CreateLineParams struct {
	Name sql.NullString
	Type sql.NullString
	NID  sql.NullInt64
}

func (q *Queries) CreateLine(ctx context.Context, arg CreateLineParams) (Line, error) {
	row := q.db.QueryRowContext(ctx, createLine, arg.Name, arg.Type, arg.NID)
	var i Line
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.NID,
	)
	return i, err
}

const createNode = `-- name: CreateNode :one
INSERT INTO nodes (name, node_id, n_id) VALUES (?, ?, ?)
RETURNING id, name, node_id, n_id
`

type CreateNodeParams struct {
	Name   sql.NullString
	NodeID sql.NullInt64
	NID    sql.NullInt64
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, createNode, arg.Name, arg.NodeID, arg.NID)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.NodeID,
		&i.NID,
	)
	return i, err
}

const getLine = `-- name: GetLine :one
SELECT lines.id, lines.name, type, lines.n_id, nodes.id, nodes.name, node_id, nodes.n_id FROM lines
JOIN nodes ON lines.n_id = nodes.n_id
WHERE lines.id = ?
`

type GetLineRow struct {
	ID     int64
	Name   sql.NullString
	Type   sql.NullString
	NID    sql.NullInt64
	ID_2   int64
	Name_2 sql.NullString
	NodeID sql.NullInt64
	NID_2  sql.NullInt64
}

func (q *Queries) GetLine(ctx context.Context, id int64) (GetLineRow, error) {
	row := q.db.QueryRowContext(ctx, getLine, id)
	var i GetLineRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.NID,
		&i.ID_2,
		&i.Name_2,
		&i.NodeID,
		&i.NID_2,
	)
	return i, err
}

const getLines = `-- name: GetLines :many
SELECT 
  l.id AS line_id, 
  l.name AS line_name, 
  GROUP_CONCAT(l2.name) as neighbors
FROM lines AS l
  JOIN nodes AS n  ON l.n_id = n.n_id
  JOIN nodes AS n2 ON n.node_id = n2.node_id and n.n_id != n2.n_id
  JOIN lines AS l2 ON n2.n_id = l2.n_id
GROUP BY 
  l.id, 
  l.name
ORDER BY 
  n.node_id
`

type GetLinesRow struct {
	LineID    int64
	LineName  sql.NullString
	Neighbors string
}

func (q *Queries) GetLines(ctx context.Context) ([]GetLinesRow, error) {
	rows, err := q.db.QueryContext(ctx, getLines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLinesRow
	for rows.Next() {
		var i GetLinesRow
		if err := rows.Scan(&i.LineID, &i.LineName, &i.Neighbors); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
